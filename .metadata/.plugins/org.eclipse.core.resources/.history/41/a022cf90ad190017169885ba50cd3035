package com.taotao.order.service.impl;

import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import com.github.abel533.entity.Example;
import com.github.abel533.entity.Example.Criteria;
import com.taotao.manager.mapper.OrderItemMapper;
import com.taotao.manager.mapper.OrderMapper;
import com.taotao.manager.mapper.OrderShippingMapper;
import com.taotao.manager.pojo.Order;
import com.taotao.manager.pojo.OrderItem;
import com.taotao.manager.pojo.OrderShipping;
import com.taotao.order.redis.RedisUtils;
import com.taotao.order.service.OrderService;

@Service
public class OrderServiceImpl implements OrderService {

	@Autowired
	private RedisUtils redisUtils;

	@Autowired
	private OrderMapper orderMapper;

	@Autowired
	private OrderItemMapper orderItemMapper;

	@Autowired
	private OrderShippingMapper orderShippingMapper;

	@Value("${TAOTAO_ORDER_ID_KEY}")
	private String TAOTAO_ORDER_ID_KEY;

	@Override
	public String saveOrder(Order order) {
		// 创建订单号
		// 需求：唯一的，可读性高，不要太长
		// 创建方式：redis的唯一数+用户id
		String orderId = "" + this.redisUtils.incr(this.TAOTAO_ORDER_ID_KEY) + order.getUserId();

		// 保存订单数据
		order.setOrderId(orderId);
		order.setStatus(1);
		order.setCreateTime(new Date());
		order.setUpdateTime(order.getCreateTime());

		this.orderMapper.insert(order);

		// 保存订单商品数据
		// 获取订单商品
		List<OrderItem> orderItems = order.getOrderItems();
		// 遍历list保存订单商品
		for (OrderItem orderItem : orderItems) {
			// 设置订单id
			orderItem.setOrderId(orderId);

			// 保存订单商品
			this.orderItemMapper.insert(orderItem);
		}

		// 保存订单物流数据
		// 获取订单物流数据
		OrderShipping orderShipping = order.getOrderShipping();
		// 设置订单号
		orderShipping.setOrderId(orderId);
		// 保存订单物流
		this.orderShippingMapper.insert(orderShipping);

		// 返回订单id
		return orderId;
	}

	@Override
	public Order queryOrderByOrderId(String orderId) {
		// 不管是逆向工程还是通用Mapper，都只能做单表查询

		// 1.根据订单id查询订单
		Order order = this.orderMapper.selectByPrimaryKey(orderId);

		// 2.根据订单id查询订单商品
		// 设置查询条件
		OrderItem param = new OrderItem();
		param.setOrderId(orderId);

		// 使用条件查询订单商品
		List<OrderItem> orderItems = this.orderItemMapper.select(param);

		// 3.根据订单id查询订单物流
		OrderShipping orderShipping = this.orderShippingMapper.selectByPrimaryKey(orderId);

		// 把订单商品和订单物流设置到订单里
		order.setOrderItems(orderItems);
		order.setOrderShipping(orderShipping);

		return order;
	}

	@Override
	public void cleanOrder() {
		// 设置哪些订单要清理（设置更新的条件）
		Example example = new Example(Order.class);
		Criteria criteria = example.createCriteria();
		// 订单支付类型是在线支付，paymentType：1
		criteria.andEqualTo("paymentType", 1);
		// 订单的创建时间是两天或两天前create_time
		criteria.andEqualTo("paymentType", 1);
		// 订单的状态是未付款，status：1
		criteria.andEqualTo("paymentType", 1);

		// 设置需要把订单更新成什么样子
		// 设置订单的状态是关闭，status：6

		// 设置订单的关闭时间是当前时间，close_time

		// 执行更新方法
		this.orderMapper.updateByExample(order, example);
	}

}
